{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy highly available and scalable Arkime (formerly Moloch) packet capture system enhanced with Suricata IDS",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network"
                    },
                    "Parameters": [
                        "VpcCIDR",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "PrivateSubnet1CIDR",
                        "PrivateSubnet2CIDR",
                        "CaptureCIDR",
                        "ViewerCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Arkime Instances"
                    },
                    "Parameters": [
                        "ViewerInstanceType",
                        "CaptureInstanceType",
                        "LatestAmiId"
                    ]
                },
                {
                    "Label": {
                        "default": "Elasticsearch"
                    },
                    "Parameters": [
                        "ESVersion",
                        "ESInstanceType",
                        "ESInstanceCount",
                        "ESVolumeSize",
                        "CreateESServiceLinkedRole"
                    ]
                },
                {
                    "Label": {
                        "default": "Arkime Application"
                    },
                    "Parameters": [
                        "DownloadURL",
                        "AdminUser",
                        "AdminPassword",
                        "S2SPassword",
                        "S3FMaxObjectSizeGB",
                        "S3FlushInterval",
                        "TcpHealthCheckPort",
                        "S3ExpireDays"
                    ]
                },
                {
                    "Label": {
                        "default": "Auto-scaling"
                    },
                    "Parameters": [
                        "ViewerMinSize",
                        "ViewerMaxSize",
                        "CaptureMinSize",
                        "CaptureMaxSize",
                        "OperatorEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Load Balancing"
                    },
                    "Parameters": [
                        "CaptureCrossZoneLoadBalancing"
                    ]
                },
                {
                    "Label": {
                        "default": "Viewer UI TLS certificate"
                    },
                    "Parameters": [
                        "CertificateArn"
                    ]
                },
                {
                    "Label": {
                        "default": "Logging"
                    },
                    "Parameters": [
                        "LogRetentionDays"
                    ]
                }
            ],
            "ParameterLabels": {
                "VpcCIDR": {
                    "default": "VPC CIDR"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public subnet 1 CIDR"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public subnet 2 CIDR"
                },
                "PrivateSubnet1CIDR": {
                    "default": "Private subnet 1 CIDR"
                },
                "PrivateSubnet2CIDR": {
                    "default": "Private subnet 2 CIDR"
                },
                "CaptureCIDR": {
                    "default": "Traffic capture CIDR"
                },
                "ViewerCIDR": {
                    "default": "Viewer access CIDR"
                },
                "ESVersion": {
                    "default": "Elasticsearch version"
                },
                "ESInstanceCount": {
                    "default": "Number of Elasticsearch instances"
                },
                "ESVolumeSize": {
                    "default": "Elasticsearch volume size"
                },
                "ESInstanceType": {
                    "default": "Elasticsearch instance type"
                },
                "CreateESServiceLinkedRole": {
                    "default": "Create Service-Linked Role for Amazon ES"
                },
                "ViewerInstanceType": {
                    "default": "Viewer instance type"
                },
                "CaptureInstanceType": {
                    "default": "Capture instance type"
                },
                "LatestAmiId": {
                    "default": "Amazon Linux 2 AMI ID"
                },
                "DownloadURL": {
                    "default": "Arkime download URL"
                },
                "AdminUser": {
                    "default": "Administrator username"
                },
                "AdminPassword": {
                    "default": "Administrator password"
                },
                "S2SPassword": {
                    "default": "S2S password"
                },
                "S3FMaxObjectSizeGB": {
                    "default": "Maximum packet capture size"
                },
                "S3FlushInterval": {
                    "default": "New packet capture object interval"
                },
                "S3ExpireDays": {
                    "default": "Days to keep packet captures"
                },
                "TcpHealthCheckPort": {
                    "default": "TCP port for capture instance health check"
                },
                "ViewerMinSize": {
                    "default": "Minumum number of viewer instances"
                },
                "ViewerMaxSize": {
                    "default": "Maximum number of viewer instances"
                },
                "CaptureMinSize": {
                    "default": "Minumum number of capture instances"
                },
                "CaptureMaxSize": {
                    "default": "Maximum number of capture instances"
                },
                "OperatorEmail": {
                    "default": "Auto-scale notifications email address"
                },
                "CaptureCrossZoneLoadBalancing": {
                    "default": "Enable cross-zone load balancing for capture instances"
                },
                "CertificateArn": {
                    "default": "TLS Certificate ARN"
                },
                "LogRetentionDays": {
                    "default": "CloudWatch Logs retention period"
                }
            }
        },
        "cfn-lint": {
            config: {
                ignore_checks: [
                    "W4002"
                    ]
            }
        }
    },
    "Parameters": {
        "VpcCIDR": {
            "Type": "String",
            "Description": "IP range in CIDR notation for the VPC",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "PublicSubnet1CIDR": {
            "Type": "String",
            "Description": "IP range in CIDR notation for the public subnet in the first Availability Zone",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "PublicSubnet2CIDR": {
            "Type": "String",
            "Description": "IP range in CIDR notation for the public subnet in the second Availability Zone",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "PrivateSubnet1CIDR": {
            "Type": "String",
            "Description": "IP range in CIDR notation for the private subnet in the first Availability Zone",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "PrivateSubnet2CIDR": {
            "Type": "String",
            "Description": "IP range in CIDR notation for the private subnet in the second Availability Zone",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "S3FlushInterval": {
            "Type": "Number",
            "Description": "Write new pcap object to S3 every x minutes, 0 to disable",
            "Default": 1,
            "ConstraintDescription": "must be between 0 and 720",
            "MinValue": 0,
            "MaxValue": 720
        },
        "S3FMaxObjectSizeGB": {
            "Type": "Number",
            "Description": "Maximum pcap file size to store in S3 in GB",
            "Default": 4,
            "ConstraintDescription": "must be between 0.01 and 1024",
            "MinValue": 0.01,
            "MaxValue": 1024
        },
        "S3ExpireDays": {
            "Type": "Number",
            "Description": "Expire packet captures from S3 after this many days",
            "Default": 3660,
            "ConstraintDescription": "must be 1 or more",
            "MinValue": 1
        },
        "TcpHealthCheckPort": {
            "Type": "Number",
            "Description": "TCP Health Check port for Capture instances",
            "Default": 24789,
            "ConstraintDescription": "must be between 1 and 65535",
            "MinValue": 1,
            "MaxValue": 65535
        },
        "ViewerMinSize": {
            "Type": "Number",
            "Description": "Minumum number of instances in the Capture Auto Scaling group",
            "Default": 2,
            "ConstraintDescription": "must be 1 or greater",
            "MinValue": 0
        },
        "ViewerMaxSize": {
            "Type": "Number",
            "Description": "Maxiumum number of instances in the Capture Auto Scaling group",
            "ConstraintDescription": "must be 1 or greater",
            "Default": 2,
            "MinValue": 1
        },
        "CaptureMinSize": {
            "Type": "Number",
            "Description": "Minumum number of instances in the Capture Auto Scaling group",
            "Default": 2,
            "ConstraintDescription": "must be 1 or greater",
            "MinValue": 0
        },
        "CaptureMaxSize": {
            "Type": "Number",
            "Description": "Maxiumum number of instances in the Capture Auto Scaling group",
            "ConstraintDescription": "must be 1 or greater",
            "Default": 2,
            "MinValue": 1
        },
        "CaptureCrossZoneLoadBalancing": {
            "Type": "String",
            "Default": "false",
            "ConstraintDescription": "must be true or false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "ViewerInstanceType": {
            "Type": "String",
            "Default": "t3.small",
            "Description": "Enter Viewer instance type"
        },
        "CaptureInstanceType": {
            "Type": "String",
            "Default": "t3.medium",
            "Description": "Enter Capture instance type"
        },
        "OperatorEmail": {
            "Description": "E-mail address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "ESVersion": {
            "Type": "String",
            "Default": "7.10",
            "Description": "ElasticSearch version"
        },
        "ESInstanceType": {
            "Type": "String",
            "Default": "t3.medium.elasticsearch",
            "Description": "Enter ElasticSearch instance type"
        },
        "ESInstanceCount": {
            "Type": "Number",
            "Description": "Number of ElasticSearch instances",
            "Default": 2,
            "ConstraintDescription": "must be an even number, 2 or greater",
            "MinValue": 2
        },
        "ESVolumeSize": {
            "Type": "Number",
            "Description": "EBS Volume size in GB",
            "Default": 10
        },
        "CreateESServiceLinkedRole": {
            "Type": "String",
            "Description": "Create Service-Linked Role for Amazon Elasticsearch?",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Default": "yes"
        },
        "CertificateArn": {
            "Type": "String",
            "Description": "TLS Certificate ARN from AWS Certificate Manager"
        },
        "CaptureCIDR": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow VXLAN traffic from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "ViewerCIDR": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow HTTPS access from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "S2SPassword": {
            "Type": "String",
            "NoEcho": true,
            "Description": "Enter S2S password, it can be random and it is not exposed to the end user",
            "ConstraintDescription": "must be at least six alphanumeric characters",
            "MinLength": "6",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DownloadURL": {
            "Type": "String",
            "Default": "https://s3.amazonaws.com/files.molo.ch/builds/centos-7/arkime-3.0.0-1.x86_64.rpm",
            "Description": "Enter Arkime CentOS 7 RPM package download URL",
            "MinLength": "5"
        },
        "AdminUser": {
            "Type": "String",
            "Default": "admin",
            "Description": "Enter admin username",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "between 1 and 16 alphanumeric characters",
            "MinLength": "1",
            "MaxLength": "16"
        },
        "AdminPassword": {
            "Type": "String",
            "NoEcho": true,
            "Description": "Enter admin password",
            "ConstraintDescription": "must be at least six alphanumeric characters",
            "MinLength": "6",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "LogRetentionDays": {
            "Type": "Number",
            "Default": 3653,
            "AllowedValues": [
                1,
                3,
                5,
                7,
                14,
                30,
                60,
                90,
                120,
                150,
                180,
                365,
                400,
                545,
                731,
                1827,
                3653
            ],
            "Description": "CloudWatch Logs retention in days"
        }
    },
    "Conditions": {
        "CondCreateESServiceLinkedRole": {
            "Fn::Equals": [
                {
                    "Ref": "CreateESServiceLinkedRole"
                },
                "yes"
            ]
        }
    },
    "Resources": {
        "InitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        },
        "SystemLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        },
        "ViewerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        },
        "CaptureLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        },
        "SuricataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogRetentionDays"
                }
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCIDR"
                },
                "EnableDnsHostnames": true,
            }
        },
        "ESSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable ElasticSearch port 443",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "127.0.0.1/32",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateEndpointSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable port 443",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "127.0.0.1/32",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "NatGateway1EIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway2EIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway1": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "NatGateway2": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway2EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "ElasticSearchDomain": {
            "Type": "AWS::Elasticsearch::Domain",
            "Properties": {
                "AccessPolicies": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": "es:*",
                            "Resource": "arn:aws:es:*"
                        }
                    ]
                },
                "ElasticsearchClusterConfig": {
                    "InstanceCount": {
                        "Ref": "ESInstanceCount"
                    },
                    "InstanceType": {
                        "Ref": "ESInstanceType"
                    },
                    "ZoneAwarenessEnabled": true
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeSize": {
                        "Ref": "ESVolumeSize"
                    }
                },
                "ElasticsearchVersion": {
                    "Ref": "ESVersion"
                },
                "VPCOptions": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "ESSecurityGroup"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "PrivateSubnet1"
                        },
                        {
                            "Ref": "PrivateSubnet2"
                        }
                    ]
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1CIDR"
                }
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet2CIDR"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1CIDR"
                }
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2CIDR"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "DefaultPublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "PrivateRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "DefaultPrivateRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway1"
                }
            }
        },
        "DefaultPrivateRoute2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway2"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                }
            }
        },
        "ESServiceLinkedRole": {
            "Type": "AWS::IAM::ServiceLinkedRole",
            "Condition": "CondCreateESServiceLinkedRole",
            "Properties": {
                "AWSServiceName": "es.amazonaws.com"
            }
        },
        "CaptureIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ],
                "Policies": [
                    {
                        "PolicyName": "ArkimeCapturePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "S3Bucket",
                                                        "Arn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ViewerIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ],
                "Policies": [
                    {
                        "PolicyName": "ArkimeViewerPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "S3Bucket",
                                                        "Arn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CaptureInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "CaptureIAMRole"
                    }
                ]
            }
        },
        "ViewerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ViewerIAMRole"
                    }
                ]
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket"
        },
        "S3Endpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
                },
                "RouteTableIds": [
                    {
                        "Ref": "PrivateRouteTable1"
                    },
                    {
                        "Ref": "PrivateRouteTable2"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "LogsEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.logs"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "PrivateEndpointSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SSMEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ssm"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "PrivateEndpointSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "EC2MessagesEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ec2messages"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "PrivateEndpointSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SSMMessagesEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ssmmessages"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "PrivateEndpointSecurityGroup"
                    }
                ],
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "VXLANLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "Type": "network",
                "LoadBalancerAttributes": [
                    {
                        "Key": "load_balancing.cross_zone.enabled",
                        "Value": {
                            "Ref": "CaptureCrossZoneLoadBalancing"
                        }
                    }
                ]
            }
        },
        "TrafficMirrorTarget": {
            "Type": "AWS::EC2::TrafficMirrorTarget",
            "Properties": {
                "NetworkLoadBalancerArn": {
                    "Ref": "VXLANLoadBalancer"
                }
            }
        },
        "VXLANListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "CaptureTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "VXLANLoadBalancer"
                },
                "Port": 4789,
                "Protocol": "UDP"
            }
        },
        "ViewerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ViewerLBSecurityGroup"
                    }
                ],
                "Type": "application"
            }
        },
        "ViewerHTTPSListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "CertificateArn"
                        }
                    }
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ViewerTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ViewerLoadBalancer"
                },
                "Port": 443,
                "Protocol": "HTTPS"
            }
        },
        "ViewerHTTPListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "redirect",
                        "RedirectConfig": {
                            "Protocol": "HTTPS",
                            "Port": "443",
                            "Host": "#{host}",
                            "Path": "/#{path}",
                            "Query": "#{query",
                            "StatusCode": "HTTP_301"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ViewerLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "ViewerAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "ESInitInstance",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "MinSize": {
                    "Ref": "ViewerMinSize"
                },
                "MaxSize": {
                    "Ref": "ViewerMaxSize"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "ViewerTargetGroup"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "ViewerLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "ViewerLaunchTemplate",
                            "LatestVersionNumber"
                            ]
                    }
                },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 600,
                "NotificationConfigurations": [
                    {
                        "TopicARN": {
                            "Ref": "NotificationTopic"
                        },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                            "autoscaling:TEST_NOTIFICATION"
                        ]
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "ViewerMinSize"
                    }
                }
            }
        },
        "CaptureAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "ESInitInstance",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "MinSize": {
                    "Ref": "CaptureMinSize"
                },
                "MaxSize": {
                    "Ref": "CaptureMaxSize"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "CaptureTargetGroup"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "CaptureLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "CaptureLaunchTemplate",
                            "LatestVersionNumber"
                            ]
                    }
                },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 600,
                "NotificationConfigurations": [
                    {
                        "TopicARN": {
                            "Ref": "NotificationTopic"
                        },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                            "autoscaling:TEST_NOTIFICATION"
                        ]
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "CaptureMinSize"
                    }
                }
            }
        },
        "CaptureTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckPort": {
                    "Ref": "TcpHealthCheckPort"
                },
                "HealthCheckProtocol": "TCP",
                "Port": 4789,
                "Protocol": "UDP",
                "TargetType": "instance",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "ViewerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckPort": "8005",
                "Port": 8005,
                "Protocol": "HTTP",
                "HealthCheckPath": "/_ns_/nstest.html",
                "Matcher": {
                    "HttpCode": "200"
                },
                "TargetType": "instance",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "ViewerLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "configure-all": [
                            "install-configure-cloudwatch-agent",
                            "install-epel",
                            "install-arkime-dependencies",
                            "install-arkime"
                        ]
                    },
                    "install-configure-cloudwatch-agent": {
                        "files": {
                            "/opt/aws/amazon-cloudwatch-agent/bin/config.json": {
                                "content": {
                                    "logs": {
                                        "logs_collected": {
                                            "files": {
                                                "collect_list": [
                                                    {
                                                        "file_path": "/var/log/messages",
                                                        "log_group_name": {
                                                            "Ref": "SystemLogGroup"
                                                        }
                                                    },
                                                    {
                                                        "file_path": "/opt/arkime/logs/viewer.log",
                                                        "log_group_name": {
                                                            "Ref": "ViewerLogGroup"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "packages": {
                            "rpm": {
                                "cloudwatch-agent": "https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"
                            }
                        },
                        "commands": {
                            "configure-agent": {
                                "command": "amazon-cloudwatch-agent-ctl -a fetch-config -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s"
                            }
                        }
                    },
                    "install-epel": {
                        "commands": {
                            "install-epel-extra": {
                                "command": "amazon-linux-extras install epel -y"
                            }
                        }
                    },
                    "install-arkime-dependencies": {
                        "packages": {
                            "yum": {
                                "libyaml-devel": [],
                                "perl-JSON": [],
                                "perl-libwww-perl": [],
                                "perl-LWP-Protocol-https": []
                            }
                        }
                    },
                    "install-arkime": {
                        "packages": {
                            "rpm": {
                                "arkime": {
                                    "Ref": "DownloadURL"
                                }
                            },
                            "yum": {
                                "crudini": []
                            }
                        },
                        "files": {
                            "/opt/arkime/Configure-answers": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "eth0",
                                            "no",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Fn::GetAtt": [
                                                                "ElasticSearchDomain",
                                                                "DomainEndpoint"
                                                            ]
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "S2SPassword"
                                            },
                                            "yes"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-remove-yum-prompt": {
                                "command": "sed -i \"s/yum install/yum -y install/g\" /opt/arkime/bin/Configure"
                            },
                            "2-configure-arkime": {
                                "command": "/opt/arkime/bin/Configure < /opt/arkime/Configure-answers"
                            },
                            "6.1-set-S3-region": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default s3Region ${AWS::Region}"
                                }
                            },
                            "6.2-set-S3-bucket": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default s3Bucket ${S3Bucket}"
                                }
                            },
                            "6.3-set-viewer-plugin": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default viewerPlugins writer-s3/index.js"
                            },
                            "6.4-set-pcap-write-method": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default pcapWriteMethod s3"
                            },
                            "6.5-set-S3-ExpireDays": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default s3ExpireDays ${S3ExpireDays}"
                                }
                            },
                            "6.6-remove-geoLite2ASN": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default geoLite2ASN \"\""
                            },
                            "6.7-remove-geoLite2Country ": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default geoLite2Country \"\""
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "arkimeviewer": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "LaunchTemplateData": {
                    "ImageId": {
                        "Ref": "LatestAmiId"
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "ViewerInstanceProfile"
                        }
                    },
                    "InstanceType": {
                        "Ref": "ViewerInstanceType"
                    },
                    "SecurityGroupIds": [
                        {
                            "Ref": "ViewerInstanceSecurityGroup"
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "#!/bin/bash -xe",
                                    "yum install -y aws-cfn-bootstrap",
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-init -v -c configure-all",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "--resource ViewerLaunchTemplate",
                                                "--region",
                                                {
                                                    "Ref": "AWS::Region"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-signal",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                " --region ",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "--resource ViewerAutoScalingGroup"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "CaptureLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "configure-all": [
                            "install-configure-cloudwatch-agent",
                            "install-epel",
                            "install-suricata",
                            "install-arkime-dependencies",
                            "install-arkime"
                        ]
                    },
                    "install-configure-cloudwatch-agent": {
                        "files": {
                            "/opt/aws/amazon-cloudwatch-agent/bin/config.json": {
                                "content": {
                                    "logs": {
                                        "logs_collected": {
                                            "files": {
                                                "collect_list": [
                                                    {
                                                        "file_path": "/var/log/messages",
                                                        "log_group_name": {
                                                            "Ref": "SystemLogGroup"
                                                        }
                                                    },
                                                    {
                                                        "file_path": "/opt/arkime/logs/capture.log",
                                                        "log_group_name": {
                                                            "Ref": "CaptureLogGroup"
                                                        }
                                                    },
                                                    {
                                                        "file_path": "/var/log/suricata/eve.json",
                                                        "log_group_name": {
                                                            "Ref": "SuricataLogGroup"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "packages": {
                            "rpm": {
                                "cloudwatch-agent": "https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"
                            }
                        },
                        "commands": {
                            "configure-agent": {
                                "command": "amazon-cloudwatch-agent-ctl -a fetch-config -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s"
                            }
                        }
                    },
                    "install-epel": {
                        "commands": {
                            "install-epel-extra": {
                                "command": "amazon-linux-extras install epel -y"
                            }
                        }
                    },
                    "install-suricata": {
                        "packages": {
                            "yum": {
                                "suricata": []
                            }
                        },
                        "files": {
                            "/etc/sysconfig/suricata": {
                                "content": "OPTIONS=\"--set decoder.vxlan.enabled=true -k none -i eth0 --user suricata udp port 4789\""
                            }
                        },
                        "commands": {
                            "1-update-suricata": {
                                "command": "suricata-update"
                            },
                            "2-enable-hourly-updates": {
                                "command": "echo \"10 * * * * suricata-update && suricatasc -c reload-rules\" | crontab"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "suricata": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/suricata/suricata.yaml"
                                    ]
                                }
                            }
                        }
                    },
                    "install-arkime-dependencies": {
                        "packages": {
                            "yum": {
                                "libyaml-devel": [],
                                "perl-JSON": [],
                                "perl-libwww-perl": [],
                                "perl-LWP-Protocol-https": []
                            }
                        }
                    },
                    "install-arkime": {
                        "packages": {
                            "rpm": {
                                "arkime": {
                                    "Ref": "DownloadURL"
                                }
                            },
                            "yum": {
                                "crudini": []
                            }
                        },
                        "files": {
                            "/opt/arkime/Configure-answers": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "eth0",
                                            "no",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Fn::GetAtt": [
                                                                "ElasticSearchDomain",
                                                                "DomainEndpoint"
                                                            ]
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "S2SPassword"
                                            },
                                            "yes"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-remove-yum-prompt": {
                                "command": "sed -i \"s/yum install/yum -y install/g\" /opt/arkime/bin/Configure"
                            },
                            "2-configure-arkime": {
                                "command": "/opt/arkime/bin/Configure < /opt/arkime/Configure-answers"
                            },
                            "3-add-plugins": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default plugins \"suricata.so; writer-s3.so; tcphealthcheck.so\""
                            },
                            "4-add-suricata-alert-file": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default suricataAlertFile /var/log/suricata/eve.json"
                            },
                            "5-add-bpf": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default bpf \"udp port 4789\""
                            },
                            "6.1-set-S3-region": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default s3Region ${AWS::Region}"
                                }
                            },
                            "6.2-set-S3-bucket": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default s3Bucket ${S3Bucket}"
                                }
                            },
                            "6.3-set-viewer-plugin": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default viewerPlugins writer-s3/index.js"
                            },
                            "6.4-set-pcap-write-method": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default pcapWriteMethod s3"
                            },
                            "6.5-set-maxFileTimeM": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default maxFileTimeM ${S3FlushInterval}"
                                }
                            },
                            "6.6-set-maxFileSizeG": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default maxFileSizeG ${S3FMaxObjectSizeGB}"
                                }
                            },
                            "6.7-remove-geoLite2ASN": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default geoLite2ASN \"\""
                            },
                            "6.8-remove-geoLite2Country ": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default geoLite2Country \"\""
                            },
                            "6.9-set-tcp-health-check": {
                                "command": {
                                    "Fn::Sub": "crudini --set /opt/arkime/etc/config.ini default tcpHealthCheckPort ${TcpHealthCheckPort}"
                                }
                            },
                            "7.1-change-dropUser": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default dropUser suricata"
                            },
                            "7.2-change-dropGroup": {
                                "command": "crudini --set /opt/arkime/etc/config.ini default dropGroup suricata"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "arkimecapture": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "LaunchTemplateData": {
                    "ImageId": {
                        "Ref": "LatestAmiId"
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "CaptureInstanceProfile"
                        }
                    },
                    "InstanceType": {
                        "Ref": "CaptureInstanceType"
                    },
                    "SecurityGroupIds": [
                        {
                            "Ref": "CaptureInstanceSecurityGroup"
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "#!/bin/bash -xe",
                                    "yum install -y aws-cfn-bootstrap",
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-init -v -c configure-all",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "--resource CaptureLaunchTemplate",
                                                "--region",
                                                {
                                                    "Ref": "AWS::Region"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-signal",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                " --region ",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "--resource CaptureAutoScalingGroup"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "ESInitInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "configure-all": [
                            "install-configure-cloudwatch-agent",
                            "install-arkime-dependencies",
                            "install-arkime"
                        ]
                    },
                    "install-configure-cloudwatch-agent": {
                        "files": {
                            "/opt/aws/amazon-cloudwatch-agent/bin/config.json": {
                                "content": {
                                    "logs": {
                                        "logs_collected": {
                                            "files": {
                                                "collect_list": [
                                                    {
                                                        "file_path": "/var/log/cloud-init-output.log",
                                                        "log_group_name": {
                                                            "Ref": "InitLogGroup"
                                                        }
                                                    },
                                                    {
                                                        "file_path": "/var/log/cloud-init.log",
                                                        "log_group_name": {
                                                            "Ref": "InitLogGroup"
                                                        }
                                                    },
                                                    {
                                                        "file_path": "/var/log/messages",
                                                        "log_group_name": {
                                                            "Ref": "SystemLogGroup"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "packages": {
                            "rpm": {
                                "cloudwatch-agent": "https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm"
                            }
                        },
                        "commands": {
                            "configure-agent": {
                                "command": "amazon-cloudwatch-agent-ctl -a fetch-config -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s"
                            }
                        }
                    },
                    "install-arkime-dependencies": {
                        "packages": {
                            "yum": {
                                "libyaml-devel": [],
                                "perl-JSON": [],
                                "perl-libwww-perl": [],
                                "perl-LWP-Protocol-https": []
                            }
                        }
                    },
                    "install-arkime": {
                        "packages": {
                            "rpm": {
                                "arkime": {
                                    "Ref": "DownloadURL"
                                }
                            }
                        },
                        "files": {
                            "/opt/arkime/Configure-answers": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "eth0",
                                            "no",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Fn::GetAtt": [
                                                                "ElasticSearchDomain",
                                                                "DomainEndpoint"
                                                            ]
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "S2SPassword"
                                            },
                                            "yes"
                                        ]
                                    ]
                                }
                            },
                            "/opt/arkime/db/safeinit.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "echo 'Checking ES URL:' $1",
                                            "if /opt/arkime/db/db.pl $1 info 2>/dev/null | grep 'DB Version' | grep '\\-1' >/dev/null",
                                            "then",
                                            "    echo 'ES running but not initialised, initialising...'",
                                            "    /opt/arkime/db/db.pl $1 init && /opt/arkime/bin/arkime_add_user.sh \"$2\" \"Admin User\" \"$3\" --admin",
                                            "    exit $?",
                                            "elif /opt/arkime/db/db.pl $1 info >/dev/null 2>&1",
                                            "then",
                                            "    echo 'ES running and initialised. Nothing to do.'",
                                            "    exit 0",
                                            "else",
                                            "    echo 'ES not reachable'",
                                            "    exit 1",
                                            "fi"
                                        ]
                                    ]
                                },
                                "mode": "000700"
                            }
                        },
                        "commands": {
                            "1-remove-yum-prompt": {
                                "command": "sed -i \"s/yum install/yum -y install/g\" /opt/arkime/bin/Configure"
                            },
                            "2-configure-arkime": {
                                "command": "/opt/arkime/bin/Configure < /opt/arkime/Configure-answers"
                            },
                            "3-ES-init": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "/opt/arkime/db/safeinit.sh",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "https://",
                                                        {
                                                            "Fn::GetAtt": [
                                                                "ElasticSearchDomain",
                                                                "DomainEndpoint"
                                                            ]
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "AdminUser"
                                            },
                                            {
                                                "Ref": "AdminPassword"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "InstanceType": "t3.micro",
                "IamInstanceProfile": {
                    "Ref": "CaptureInstanceProfile"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "CaptureInstanceSecurityGroup"
                    }
                ],
                "InstanceInitiatedShutdownBehavior": "terminate",
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
                                "yum install -y aws-cfn-bootstrap",
                                {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "/opt/aws/bin/cfn-init -v -c configure-all",
                                            "--stack",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "--resource ESInitInstance",
                                            "--region",
                                            {
                                                "Ref": "AWS::Region"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "/opt/aws/bin/cfn-signal",
                                            "--stack",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "--resource ESInitInstance"
                                        ]
                                    ]
                                },
                                "poweroff"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT20M"
                }
            }
        },
        "ViewerLBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to HTTP and HTTPS",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "ViewerCIDR"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    },
                    {
                        "CidrIp": {
                            "Ref": "ViewerCIDR"
                        },
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "ToPort": 80
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "ViewerLBSecurityGroupEgress": {
            "Type" : "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ViewerLBSecurityGroup"
                },
                "DestinationSecurityGroupId": {
                    "Ref": "ViewerInstanceSecurityGroup"
                },
                "FromPort": 8005,
                "IpProtocol": "tcp",
                "ToPort": 8005
            }
        },
        "ViewerInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to Arkime viewer port 8005 from Application Load Balancer",
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "ViewerLBSecurityGroup"
                        },
                        "FromPort": 8005,
                        "IpProtocol": "tcp",
                        "ToPort": 8005
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "CaptureInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access VXLAN and port 80 for Load Balancer health check",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CaptureCIDR"
                        },
                        "FromPort": 4789,
                        "IpProtocol": "udp",
                        "ToPort": 4789
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        },
                        "FromPort": 4789,
                        "IpProtocol": "udp",
                        "ToPort": 4789
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        },
                        "FromPort": 4789,
                        "IpProtocol": "udp",
                        "ToPort": 4789
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        },
                        "FromPort": {
                            "Ref": "TcpHealthCheckPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "TcpHealthCheckPort"
                        }
                    },
                    {
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        },
                        "FromPort": {
                            "Ref": "TcpHealthCheckPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "TcpHealthCheckPort"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Description": "VPC",
            "Value": {
                "Ref": "VPC"
            }
        },
        "S3Bucket": {
            "Description": "S3 bucket for packet captures",
            "Value": {
                "Ref": "S3Bucket"
            }
        },
        "MirrorTarget": {
            "Description": "VPC Traffic Mirror Target",
            "Value": {
                "Ref": "TrafficMirrorTarget"
            }
        },
        "ViewerURL": {
            "Description": "Arkime Viewer URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ViewerLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        },
       "InitLogGroup": {
            "Description": "Arkime Init CloudWatch Log Group",
            "Value": {
                "Ref": "InitLogGroup"
            }
        },
 
        "SystemLogGroup": {
            "Description": "System CloudWatch Log Group",
            "Value": {
                "Ref": "SystemLogGroup"
            }
        },
        "ArkimeViewerLogGroup": {
            "Description": "Arkime Viewer CloudWatch Log Group",
            "Value": {
                "Ref": "ViewerLogGroup"
            }
        },
        "ArkimeCaptureLogGroup": {
            "Description": "Arkime Capture CloudWatch Log Group",
            "Value": {
                "Ref": "CaptureLogGroup"
            }
        },
        "SuricataLogGroup": {
            "Description": "Suricata CloudWatch Log Group",
            "Value": {
                "Ref": "SuricataLogGroup"
            }
        }
    }
}